ksoc:
  # -- The base URL for the KSOC API.
  apiUrl: https://api.ksoc.com
  # -- The ID of the Access Key used in this cluster (base64).
  base64AccessKeyId: ""
  # -- The secret key part of the Access Key used in this cluster (base64).
  base64SecretKey: ""
  # -- The name of the cluster you want displayed in KSOC.
  clusterName: ""
  # -- The name of the custom secret containing Access Key.
  accessKeySecretNameOverride: ""

workloads:
  # -- Whether to disable service mesh integration.
  disableServiceMesh: true
  # -- The image pull secret name to use to pull container images.
  imagePullSecretName: ""

ksocBootstrapper:
  image:
    # -- The image to use for the ksoc-bootstrapper deployment (located at https://console.cloud.google.com/gcr/images/ksoc-public/us/ksoc-bootstrapper).
    repository: us.gcr.io/ksoc-public/ksoc-bootstrapper
    tag: v1.0.1
  env: {}
  resources:
    limits:
      cpu: 100m
      memory: 64Mi
    requests:
      cpu: 50m
      memory: 32Mi
  podAnnotations: {}
  nodeSelector: {}
  tolerations: []

ksocGuard:
  enabled: true
  image:
    # -- The image to use for the ksoc-guard deployment (located at https://console.cloud.google.com/gcr/images/ksoc-public/us/ksoc-guard).
    repository: us.gcr.io/ksoc-public/ksoc-guard
    tag: v1.0.2
  config:
    # -- Whether to block on error.
    BLOCK_ON_ERROR: false
    # -- Whether to block on policy violation.
    BLOCK_ON_POLICY_VIOLATION: false
    # -- Whether to block on timeout.
    BLOCK_ON_TIMEOUT: false
    # -- Whether to enable warning logs.
    ENABLE_WARNING_LOGS: false
    # -- The log level to use.
    LOG_LEVEL: info
  resources:
    requests:
      memory: 100Mi
      cpu: 100m
    limits:
      memory: 500Mi
      cpu: 250m
  podAnnotations: {}
  replicas: 1
  webhook:
    objectSelector: {}
    timeoutSeconds: 10
  nodeSelector: {}
  tolerations: []

ksocRuntime:
  enabled: false
  reporter:
    image:
      repository: us.gcr.io/ksoc-public/runtime-reporter
      tag: v1.0.0
    env:
      LOG_LEVEL: info
    resources:
      requests:
        memory: 100Mi
        cpu: 100m
      limits:
        memory: 500Mi
        cpu: 250m
    podAnnotations: {}
    replicas: 3
    nodeSelector: {}
    tolerations: []
  detectReachableVulnerabilities: false
  runtimeProfileRules: |
    - list: ksoc_k8s_namespaces_excluded_from_runtime_profiles
      items:
        - kube-system
        - cert-manager
        - calico-system
        - calico-apiserver
        - ksoc
    - macro: ksoc_container_entrypoint
      condition: >
        ((not proc.pname exists or proc.pname in (runc:[0:PARENT], runc:[1:CHILD], runc, pause, crio))
        or proc.name in (runc:[0:PARENT], runc:[1:CHILD], runc, pause, crio))
    - macro: ksoc_is_shared_library
      condition: >
        (fd.name glob '*/lib/*.so*')
    - rule: KSOC file access profile updated
      desc: Detect when file access profile is updated, e.g. when shared libraries are loaded by executable binaries
      source: syscall
      condition: >
        (open_read
        and container
        and not ksoc_container_entrypoint
        and ksoc_is_shared_library
        and not k8s.ns.name in (ksoc_k8s_namespaces_excluded_from_runtime_profiles))
      output: |-
        File access profile updated
        (proc_name=%proc.name
        container_id=%container.id
        container_name=%container.name
        container_image_repository=%container.image.repository
        container_image_tag=%container.image.tag
        container_image_digest=%container.image.digest
        k8s_pod_name=%k8s.pod.name
        k8s_ns_name=%k8s.ns.name
        fd_name=%fd.name)
      priority: NOTICE
      tags:
        - ksoc_file_access_profile
        - file
      enabled: true
    - rule: KSOC executable profile updated
      desc: Detect when executable profile is updated, e.g. when programs are executed in containers
      source: syscall
      condition: >
        (evt.type in (execve)
        and container
        and not ksoc_container_entrypoint
        and not k8s.ns.name in (ksoc_k8s_namespaces_excluded_from_runtime_profiles))
      output: |-
        Executable profile updated
        (proc_name=%proc.name
        container_id=%container.id
        container_name=%container.name
        container_image_repository=%container.image.repository
        container_image_tag=%container.image.tag
        container_image_digest=%container.image.digest
        k8s_pod_name=%k8s.pod.name
        k8s_ns_name=%k8s.ns.name
        proc_exepath=%proc.exepath)
      priority: NOTICE
      tags:
        - ksoc_executable_profile
        - process
      enabled: true

ksocSbom:
  enabled: true
  image:
    # -- The image to use for the ksoc-sbom deployment (located at https://console.cloud.google.com/gcr/images/ksoc-public/us/ksoc-sbom).
    repository: us.gcr.io/ksoc-public/ksoc-sbom
    tag: v1.0.2
  env: {}
  resources:
    requests:
      cpu: 500m
      memory: 1Gi
    limits:
      cpu: 1
      memory: 2Gi
  podAnnotations: {}
  webhook:
    timeoutSeconds: 10
  nodeSelector: {}
  tolerations: []

ksocSync:
  enabled: true
  image:
    # -- The image to use for the ksoc-sync deployment (located at https://console.cloud.google.com/gcr/images/ksoc-public/us/ksoc-sync).
    repository: us.gcr.io/ksoc-public/ksoc-sync
    tag: v1.0.1
  env: {}
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi
  podAnnotations: {}
  nodeSelector: {}
  tolerations: []

ksocWatch:
  enabled: true
  image:
    # -- The image to use for the ksoc-watch deployment (located at https://console.cloud.google.com/gcr/images/ksoc-public/us/ksoc-watch).
    repository: us.gcr.io/ksoc-public/ksoc-watch
    tag: v1.0.4
  env:
    # -- Whether to trigger reconciliation at startup.
    RECONCILIATION_AT_START: false
  resources:
    limits:
      cpu: 250m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  podAnnotations: {}
  nodeSelector: {}
  tolerations: []

# Values for falco subchart (https://github.com/falcosecurity/charts/tree/falco-3.3.0/falco)
falco:
  image:
    pullPolicy: Always
  fullnameOverride: "ksoc-runtime-ds"
  driver:
    enabled: true
    kind: modern-bpf
    modern_bpf:
      leastPrivileged: true
  extra:
    args:
      - "--disable-cri-async"
  falco:
    http_output:
      enabled: true
      url: http://ksoc-runtime.ksoc.svc.cluster.local/falco-alert
      user_agent: falcosecurity/falco
      insecure: true
    json_output: true
    priority: notice
    stdout_output:
      enabled: false
    syslog_output:
      enabled: false
  mounts:
    volumeMounts:
      - name: ksoc-runtime-profile-rules-config
        mountPath: /etc/falco/rules.d/
    volumes:
      - name: ksoc-runtime-profile-rules-config
        configMap:
          name: ksoc-runtime-profile-configuration
          optional: true
