ksoc:
  # -- The combined API key to authenticate with KSOC
  apiKey: ""
  # -- The base URL for the KSOC API.
  apiUrl: https://api.ksoc.com
  # -- The ID of the Access Key used in this cluster (base64).
  base64AccessKeyId: ""
  # -- The secret key part of the Access Key used in this cluster (base64).
  base64SecretKey: ""
  # -- The Secret Name or Secret ARN containing the Access Key. If provided, plugins try to read the Access Key from the AWS Secret Manager.
  # Plugins expect following keys in the secret: `access-key-id` and `secret-key`. If the secret is not found, the plugin falls back to the `base64AccessKeyId` and `base64SecretKey` values.
  # If `awsSecretId` is provided service accounts needs to have access to the secret in AWS, via IRSA or EKS Pod Identity.
  awsSecretId: ""
  # -- The name of the cluster you want displayed in KSOC.
  clusterName: ""
  # -- The name of the custom secret containing Access Key.
  accessKeySecretNameOverride: ""
  # -- Enable seccompProfile for all KSOC pods
  seccompProfile:
    enabled: true

workloads:
  # -- Whether to disable service mesh integration.
  disableServiceMesh: true
  # -- The image pull secret name to use to pull container images.
  imagePullSecretName: ""

priorityClass:
  enabled: false
  name: ksoc-priority
  value: 1000000000
  globalDefault: false
  description: "The priority class for KSOC components"
  preemptionPolicy: PreemptLowerPriority

ksocBootstrapper:
  image:
    # -- The image to use for the ksoc-bootstrapper deployment
    repository: public.ecr.aws/n8h5y2v5/rad-security/rad-bootstrapper
    tag: v1.1.11
  env: {}
  resources:
    limits:
      cpu: 100m
      memory: 64Mi
      ephemeral-storage: 100Mi
    requests:
      cpu: 50m
      memory: 32Mi
      ephemeral-storage: 100Mi
  podAnnotations: {}
  nodeSelector: {}
  tolerations: []

ksocGuard:
  enabled: true
  image:
    # -- The image to use for the ksoc-guard deployment
    repository: public.ecr.aws/n8h5y2v5/rad-security/rad-guard
    tag: v1.1.17
  config:
    # -- Whether to block on error.
    BLOCK_ON_ERROR: false
    # -- Whether to block on policy violation.
    BLOCK_ON_POLICY_VIOLATION: false
    # -- Whether to block on timeout.
    BLOCK_ON_TIMEOUT: false
    # -- Whether to enable warning logs.
    ENABLE_WARNING_LOGS: false
    # -- The log level to use.
    LOG_LEVEL: info
  resources:
    requests:
      memory: 100Mi
      cpu: 100m
      ephemeral-storage: 100Mi
    limits:
      memory: 500Mi
      cpu: 500m
      ephemeral-storage: 1Gi
  podAnnotations: {}
  replicas: 1
  webhook:
    objectSelector: {}
    timeoutSeconds: 10
  nodeSelector: {}
  tolerations: []
  serviceAccountAnnotations: {}

ksocSbom:
  enabled: true
  image:
    # -- The image to use for the ksoc-sbom deployment
    repository: public.ecr.aws/n8h5y2v5/rad-security/rad-sbom
    tag: v1.1.33
  env:
    # -- Whether to mutate the image in pod spec by adding digest at the end. By default, digests are added to images to ensure
    # that the image that runs in the cluster matches the digest of the build.  Disable this if your continuous deployment
    # reconciler requires a strict image tag match.
    MUTATE_IMAGE: true
    # -- Whether to mutate the annotations in pod spec by adding images digests. Annotations can be used to track image
    # digests in addition to, or instead of the image tag mutation.
    MUTATE_ANNOTATIONS: false
    # -- The format of the generated SBOM. Currently we support: syft-json,cyclonedx-json,spdx-json
    SBOM_FORMAT: cyclonedx-json
    # -- Comma separated list of image pull secrets to use to pull container images. Important: The secrets must be created in the
    # same namespace as the rad-sbom deployment. By default 'rad-sbom' tries to read imagePullSecrets from the manifest spec, but
    # additionally, you can specify the secrets here.
    # If you use AWS ECR private registry, we recommend to use EKS Pod Identity or IRSA to add access to "rad-sbom" to the ECR registry.
    IMAGE_PULL_SECRETS: ""
    # -- Experimental: Whether to check for the latest image in the container registry and generate SBOM for it.
    # If deployed image has tag with semver format, rad-sbom tries to get the newest image, newest minor version, or newest patch version.
    # If the tag is not in semver format, rad-sbom tries to get the newest image from the container registry based on the tag time.
    # Please be aware that time-based algorithm requires many requests to the container registry and may be slow. It works only if
    # credentials are provided. Please note that this feature is experimental and may not work with all container registries.
    SBOM_CHECK_LATEST: false
    # -- The log level to use.  Options are trace, debug, info, warn, error
    LOG_LEVEL: info
  resources:
    requests:
      cpu: 500m
      memory: 1Gi
      ephemeral-storage: 1Gi
    limits:
      cpu: 1000m
      memory: 2Gi
      # -- The ephemeral storage limit is set to 25Gi to cache and reuse image layers for the sbom generation.
      ephemeral-storage: 25Gi
  podAnnotations: {}
  webhook:
    timeoutSeconds: 10
  nodeSelector: {}
  tolerations: []
  serviceAccountAnnotations: {}

ksocSync:
  enabled: true
  image:
    # -- The image to use for the ksoc-sync deployment
    repository: public.ecr.aws/n8h5y2v5/rad-security/rad-sync
    tag: v1.1.15
  env: {}
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
      ephemeral-storage: 1Gi
    requests:
      cpu: 100m
      memory: 128Mi
      ephemeral-storage: 100Mi
  podAnnotations: {}
  nodeSelector: {}
  tolerations: []
  serviceAccountAnnotations: {}

ksocWatch:
  enabled: true
  image:
    # -- The image to use for the ksoc-watch deployment
    repository: public.ecr.aws/n8h5y2v5/rad-security/rad-watch
    tag: v1.1.25
  env:
    # -- Whether to trigger reconciliation at startup.
    RECONCILIATION_AT_START: false
  resources:
    limits:
      cpu: 250m
      memory: 512Mi
      ephemeral-storage: 1Gi
    requests:
      cpu: 100m
      memory: 128Mi
      ephemeral-storage: 100Mi
  podAnnotations: {}
  nodeSelector: {}
  tolerations: []

  # -- If set will allow ingesting Custom Resources specified in `customResourceRules`
  ingestCustomResources: false
  # -- Rules for Custom Resource ingestion containing allow- and denylists of rules specifying `apiGroups` and `resources`.
  # E.g. `allowlist: apiGroups: ["custom.com"], resources: ["someResource", "otherResoure"]`
  # Wildcards (`*`) can be used to match all.
  # `customResourceRules.denylist` sets resources that should not be ingested. It has a priority over `customResourceRules.allowlist` to
  #  deny resources allowed using a wildcard (`*`) match.
  #  E.g. you can use `allowlist: apiGroups: ["custom.com"], resources: ["*"], denylist: apiGroups: ["custom.com"], resources: "excluded"`
  # to ingest all resources within `custom.com` group but `excluded`.
  customResourceRules:
    allowlist: []
    denylist: []
  serviceAccountAnnotations: {}

ksocNodeAgent:
  enabled: false
  reachableVulnerabilitiesEnabled: true
  image:
    repository: public.ecr.aws/n8h5y2v5/rad-security/rad-runtime
    tag: v0.1.5
  agent:
    env:
      AGENT_LOG_LEVEL: INFO
      AGENT_TRACER_IGNORE_NAMESPACES: |
        cert-manager,
        ksoc,
        kube-node-lease,
        kube-public,
        kube-system
    resources:
      limits:
        cpu: 200m
        memory: 1Gi
        ephemeral-storage: 1Gi
      requests:
        cpu: 100m
        memory: 128Mi
        ephemeral-storage: 100Mi
    # Disabled by default unless running on OpenShift.
    hostPID: null
    collectors:
      # An absolute path to the runc binary executable.
      runtimePath: ""
      containerd:
        # Enabled by default unless running on OpenShift.
        enabled: null
        socket: /run/containerd/containerd.sock
      crio:
        # Enabled by default when running on OpenShift.
        enabled: null
        socket: /run/crio/crio.sock
      docker:
        enabled: false
        socket: /run/docker.sock
    mounts:
      # A list of volumes you want to add to the agent pods.
      volumes: []
      # A list of volume mounts you want to add to the agent pods.
      volumeMounts: []
    eventQueueSize: 20000
    grpcServerBatchSize: 2000
  exporter:
    env:
      EXPORTER_LOG_LEVEL: INFO

    # -- Allows to specify wildcard rules for filtering command arguments.
    execFilters: []

    resources:
      limits:
        cpu: 500m
        memory: 1Gi
        ephemeral-storage: 1Gi
      requests:
        cpu: 100m
        memory: 128Mi
        ephemeral-storage: 100Mi
  nodeSelector: {}
  nodeName: ""
  tolerations: []
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      # -- The maximum number of pods that can be unavailable during the update. Can be an absolute number or percent, e.g.  `5` or `"10%"`
      maxUnavailable: 1
      # -- The maximum number of pods that can be scheduled above the desired number of pods. Can be an absolute number or percent, e.g. `5` or `"10%"`
      maxSurge: 0
  serviceAccountAnnotations: {}

  # -- K9 is an in-cluster response plugin.  It will request any queued commands from
  # -- the Rad Security backend, and execute them in the cluster.  Each capability must
  # -- be opted into individually.
k9:
  enabled: false
  replicas: 1
  frontend:
    image:
      repository: us.gcr.io/ksoc-public/ksoc-frontend-agent
      tag: v0.0.33
    # -- The interval in which the agent polls the backend for new actions.
    agentActionPollInterval: "5s"
  backend:
    image:
      repository: us.gcr.io/ksoc-public/ksoc-backend-agent
      tag: v0.0.34
  resources:
    limits:
      cpu: 250m
      memory: 512Mi
      ephemeral-storage: 1Gi
    requests:
      cpu: 100m
      memory: 128Mi
      ephemeral-storage: 100Mi
  capabilities:
    enableTerminatePod: false
    enableTerminateNamespace: false
    enableQuarantine: false
    enableGetLogs: false
    enableLabelPod: false
  tolerations: []
  nodeSelector: {}
  serviceAccountAnnotations: {}

# Enables support for OpenShift.
openshift:
  enabled: false

# @ignored
# -- Configuration for the EKS Addon dummy deployment. This is needed to track the status of addon.
# -- This is a known issue and this is the  workaround for now. If you are not installing through the
# -- EKS Addon Marketplace, you do not need to enable the addon.
eksAddon:
  enabled: false
  image:
    repository: public.ecr.aws/eks-distro/kubernetes/pause
    tag: v1.29.1-eks-1-29-latest
